package pharma.config;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Modality;
import pharma.Model.FieldData;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Stream;

public class CustomDialog<T,K> extends Dialog<T> {
    public enum Validation{Email,Password,Vat}
    private final VBox vbox;
    private ButtonType okButtonType;
    private List<TextField> textFieldList;
    private List<Spinner<Integer>> spinnerList;
    private  List<ChoiceBox<K>> choiceBoxes;
   private Button button_ok;
    public CustomDialog(CustomDomainBuilder customDomainBuilder) {

        super();
    this.vbox=customDomainBuilder.vbox;
    this.textFieldList=customDomainBuilder.textFieldList;
    this.spinnerList=customDomainBuilder.spinnerList;
    this.choiceBoxes=customDomainBuilder.list_choice;
        this.getDialogPane().setPrefHeight(400);
        this.getDialogPane().setPrefWidth(400);
        this.getDialogPane().setContent(vbox);
        okButtonType = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE); // inizializzo il bottone ok
        this.getDialogPane().getButtonTypes().addAll(okButtonType,ButtonType.CANCEL); // Lo aggiungo al Dialog
        initModality(Modality.APPLICATION_MODAL);
        button_ok = (Button) getDialogPane().lookupButton(okButtonType);
        show();
        generate_event();
    }

    private  void generate_event() {
        button_ok.addEventFilter(ActionEvent.ACTION, event -> {
            boolean result;
            if (textFieldList.isEmpty()) {

                result = choiceBoxes.stream().anyMatch(choice -> choice.getValue() == null);
            }
            else if(choiceBoxes.isEmpty()){

                   result = textFieldList.stream().
                           anyMatch(textField -> {
                               if(textField.getText().isEmpty()){
                                   return  true;
                               }else if(textField.getId()!=null) {
                                   return !InputValidation.get_validation(textField.getId().split("-")[0], textField.getText());
                               }
                                return  false;

                                   });


            }else {

                result = Stream.concat(choiceBoxes.stream().map(choice-> choice.getValue()==null),
                        textFieldList.stream().map(textField -> textField.getText().isEmpty())).anyMatch(results->results);

            }
            if (result) {
                Utility.create_alert(Alert.AlertType.WARNING, "Attenzione!", " Riempire tutti campi!");
                event.consume();

            }



        });
    }





     public static   class CustomDomainBuilder<T> {
        private final  String content;
        private  VBox vbox;
         private List<TextField> textFieldList;
         private List<Spinner<Integer>> spinnerList;
        private List<ChoiceBox<T>> list_choice;
        private CustomDomainBuilder(String content) {
            vbox=new VBox();
            vbox.setSpacing(20);
            this.content=content;
            textFieldList=new ArrayList<>();
            spinnerList=new ArrayList<>();
            list_choice=new ArrayList<>();

        }
        public static CustomDomainBuilder  getBuilder(String content){

            return  new CustomDomainBuilder(content);

        }
         public CustomDomainBuilder add_spinner(int min,int max) {
             Spinner<Integer> spinner = new Spinner<>();
             spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(min, max));
             spinner.setEditable(true);
             spinnerList.add(spinner);
             vbox.getChildren().add(spinner);
             return this;

         }


         public CustomDomainBuilder add_text_field( String value) {

             TextField field = new TextField();
             field.setPromptText(value);

             textFieldList.add(field);
             vbox.getChildren().add(field);
             field.setPadding(new Insets(10, 10, 10, 10));
             field.setFont(new Font("Arial", 20));
             return this;
         }
         public CustomDomainBuilder add_text_field_with_validation( String value,Validation validation) {

             TextField field = new TextField();
             field.setPromptText(value);
            switch (validation){
                case Email:{
                    field.setId("Email"+"-"+UUID.randomUUID());
                    break;
                }
                case Password:{
                    field.setId("Password"+"-"+UUID.randomUUID());
                    break;
                }
                case Vat:{
                    field.setId("Vat"+"-"+UUID.randomUUID());
                    break;
                }

            }
             textFieldList.add(field);
             vbox.getChildren().add(field);
             field.setPadding(new Insets(10, 10, 10, 10));
             field.setFont(new Font("Arial", 20));
             return this;
         }
         public CustomDomainBuilder add_choice_box(ObservableList<T> obs){
            ChoiceBox<T> fieldDataChoiceBox=new ChoiceBox<>(obs);
            vbox.getChildren().add(fieldDataChoiceBox);

            list_choice.add(fieldDataChoiceBox);
            return this;
         }

         public CustomDomainBuilder add_choice_box(ObservableList<T> obs,String id){
             ChoiceBox<T> fieldDataChoiceBox=new ChoiceBox<>(obs);
             fieldDataChoiceBox.setId(id);
             vbox.getChildren().add(fieldDataChoiceBox);

             list_choice.add(fieldDataChoiceBox);

             return this;
         }







         public CustomDialog<FieldData,?> build(){
            return new CustomDialog<>(this);

         }








    }


}

/* private <T extends Number> void addSpinnerIntoCell(TableColumn<FieldData, T> tableColumn, Class<T> type, String method) {

        tableColumn.setCellFactory(col -> new TableCell<>() {
            private final Spinner<T> spinner = new Spinner<>();
            {

                spinner.setPrefWidth(90.0);
                spinner.setEditable(true);
                spinner.getEditor().setFont(new Font(15));





                spinner.valueProperty().addListener(new ChangeListener<T>() {
                    @Override
                    public void changed(ObservableValue<? extends T> observable, T oldValue, T newValue) {
                        if(newValue!=null) {

                            Platform.runLater(() -> {


                                 FieldData fd=getTableRow().getItem();

                                    if (fd != null) {
                                        switch (method) {
                                            case "setPrice": {
                                                fd.setPrice((Double) newValue);

                                                break;
                                            }
                                            case "setQuantity": {

                                                fd.setQuantity((Integer) newValue);
                                                break;

                                            }
                                            case "setPercent": {

                                                fd.setVat_percent((Integer) newValue);
                                                break;
                                            }
                                        }
                                        obs_details.remove(fd);
                                        obs_details.add(fd);
                                        System.out.println();
                                    }

                            });

                        }}

                });

            }

            @Override
            protected void updateItem(T item, boolean empty) {
                super.updateItem(item, empty);


                if (empty || item == null) {
                    setGraphic(null);
                } else {
                    if (type == Integer.class) {
                        int maxValue = item.intValue(); // Ensure safe Integer conversion
                        spinner.setValueFactory((SpinnerValueFactory<T>) new SpinnerValueFactory.IntegerSpinnerValueFactory(0, maxValue, maxValue, 1));
                    } else if (type == Double.class) {
                        double maxValue = item.doubleValue(); // Ensure safe Double conversion
                        spinner.setValueFactory((SpinnerValueFactory<T>) new SpinnerValueFactory.DoubleSpinnerValueFactory(0.0, maxValue, maxValue, 0.1));
                    }
                    setGraphic(spinner);
                }
            }


        });
    }

    */
