package pharma.oldest;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Spinner;
import javafx.scene.control.TableColumn;
import javafx.scene.control.cell.TextFieldTableCell;
import pharma.Handler.DialogHandler;
import pharma.Model.FieldData;
import pharma.config.PopulateChoice;
import pharma.javafxlib.Controls.TextFieldComboBox;
import pharma.dao.GenericJDBCDao;
import pharma.dao.LottiDao;

import java.sql.Date;
import java.util.List;

public class OrdiniHandlerOld extends DialogHandler {
    private DatePicker date_order;
    private Spinner<Integer> spinner_vat;
    private Button button_add_lots;
    private  Button button_remove_lots;
    private  ObservableList<TextFieldComboBox> list_combomulti;
    private  ObservableList<FieldData> list_remove_fd;
    private  ObservableList<FieldData> list_current_fd;
    public OrdiniHandlerOld(LottiDao lottiDao) {
        super("Aggiungi Ordini", new PopulateChoice(lottiDao));
        getDialogPane().setPrefHeight(800);
        getDialogPane().setPrefWidth(900);
    }

    @Override
    protected void initialize() {

    }

    @Override
    protected void initialize(PopulateChoice populateChoice) {

        list_combomulti=FXCollections.observableArrayList();
        list_remove_fd=FXCollections.observableArrayList();
        list_current_fd=FXCollections.observableArrayList(populateChoice.populate("lotto"));
  /*      list_multichange();
        change_list_remove();
        setMarginButtons();*/
        add_label("Inserisci Data");
        date_order=add_calendar();
        add_label("Clicca per aggiungere pi√π lotti");
    //TextFieldComboBox<FieldData> fd=add_combox_search_with_textfield(list_current_fd);

        //List<Button> list_buttons=add_buttons_horizontal(new ArrayList<>(Arrays.asList("plus","minus")));
      //  button_add_lots=list_buttons.stream().filter(button -> button.getText().equals("plus")).toList().getFirst();
        ///add_action_add_lots(list_current_fd);
        //button_remove_lots= list_buttons.stream().filter(button -> button.getText().equals("minus")).toList().getFirst();

   //     Utility.add_iconButton(button_remove_lots,FontAwesomeSolid.MINUS);
      ///  remove_action_minus_lots();
        //setSpaceButton();
        //Utility.create_btn(button_add_lots,"add.png");
        //SimulateEvents.clickOn(button_add_lots);


    }

    @Override
    protected void initialize(PopulateChoice populateChoice, List<GenericJDBCDao> genericJDBCDao) {

    }

    @Override
    protected void initialize(PopulateChoice populateChoice, GenericJDBCDao genericJDBCDao) {

    }

    @Override
    protected FieldData get_return_data() {
        List<FieldData> list = list_combomulti.stream().map(textFieldComboBox -> (FieldData)textFieldComboBox.getChoiceBox().getValue()).toList();
        System.out.println(list.getFirst().getLotto_id());
       return FieldData.FieldDataBuilder.getbuilder().setProduction_date(Date.valueOf(date_order.getValue())).build();
    }

    @Override
    protected boolean condition_event(FieldData fieldData) throws Exception {
        return false;
    }





/*

    private void add_column_textable(TableColumn<FieldData,String> tableColumn){

        tableColumn.setCellFactory(TextFieldTableCell.forTableColumn());
        tableColumn.setOnEditCommit(event -> {
            FieldData fieldData=event.getRowValue();
            FieldData fieldData_current=FieldData.FieldDataBuilder.getbuilder().setNome(fieldData.getNome()).
                    setProduction_date(fieldData.getProduction_date()).setElapsed_date(fieldData.getElapsed_date())
                    .setPrice(Double.valueOf(event.getNewValue())).setUnit_misure(fieldData.getUnit_misure())
                    .build();
            tableView.getItems().set(event.getTablePosition().getRow(),fieldData_current);

        });
    }
    private void   add_action_add_lots(ObservableList<FieldData> observableList_lots){

        button_add_lots.setOnAction(event -> {
            Platform.runLater(() -> {
                getDialogPane().getScene().getWindow().sizeToScene();
            });


            TextFieldComboBox<FieldData> textFieldComboBox = add_combox_search_with_textfield(observableList_lots);
            list_combomulti.add(textFieldComboBox);
            textFieldComboBox.setConvert(new ComboxLotsConvert());

        });
    }


    private void list_multichange() {
        list_combomulti.addListener((ListChangeListener<TextFieldComboBox>) change -> {
            while (change.next()) {
                if (change.wasAdded()) {
                    TextFieldComboBox<FieldData> fd = change.getAddedSubList().getFirst();
                    change_listener_combo(fd.getComboBox());
                }
            }
        });
    }


    private  void change_list_remove(){
        list_remove_fd.addListener(new ListChangeListener<FieldData>() {
            @Override
            public void onChanged(Change<? extends FieldData> change) {
                while(change.next()){
                    if(change.wasAdded()){
                        FieldData fieldData=change.getAddedSubList().getFirst();
                        list_current_fd.remove(fieldData);

                    }
                    else if(change.wasRemoved()){
                        FieldData  fieldData=change.getRemoved().getFirst();
                        list_current_fd.add(fieldData);
                    }


                }
            }
        });
    }


    private  void change_listener_combo(ComboBox<FieldData> comboBox){
        comboBox.getSelectionModel().selectedItemProperty().addListener(
        (observable, oldValue, newValue) ->{
            System.out.println("old: "+comboBox.getConverter().toString(oldValue)+" new: "+comboBox.getConverter().toString(newValue));


             if(oldValue!=null && newValue!=null){

                 list_remove_fd.remove(oldValue);
                 list_combomulti.stream().filter(textFieldComboBox -> !textFieldComboBox.getComboBox().equals(comboBox)).
                         forEach(textFieldComboBox -> {
                             textFieldComboBox.getComboBox().getItems().add(oldValue);
                         });
            }
            list_remove_fd.add(newValue);
            // we Can delete this FieldData to the all the list of Combox that is different to the selected
            list_combomulti.stream().filter(textFieldComboBox -> !textFieldComboBox.getComboBox().equals(comboBox)).
                    forEach(textFieldComboBox -> {
                        textFieldComboBox.getComboBox().getItems().remove(newValue);

                    });




        });


    }
    private void   remove_action_minus_lots(){
        button_remove_lots.setOnAction(event -> {

            if(list_combomulti.size()>1){
               TextFieldComboBox<FieldData> fd_c=list_combomulti.getLast();

                getVbox().getChildren().remove(fd_c);
                getControlList().remove(fd_c);
                list_combomulti.remove(fd_c);

            }
        });


    }
    private  void setMarginButtons(){
        ButtonType button_cancel=getDialogPane().getButtonTypes().get(1);
        Button cancelBtn = (Button) getDialogPane().lookupButton(button_cancel);
        HBox.setMargin(getButton(), new Insets(0, 0, 20, 0));
        HBox.setMargin(cancelBtn, new Insets(0, 0, 20, 0));
    }
    private  void setSpaceButton(){
        HBox hBox= (HBox) button_remove_lots.getParent();
        hBox.setSpacing(400);
    }

    */





}
