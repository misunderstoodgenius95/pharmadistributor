package pharma.config;

import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Modality;

public class CustomDialog {
    private Dialog<T> dialog;
    private Spinner<Integer> spinner;
    private VBox vbox;
    private ButtonType okButtonType;
    public CustomDialog(String header, Dialog<T> dialog) {
        dialog = new Dialog<>();
        dialog.setTitle(header);
        vbox = new VBox();
        vbox.setSpacing(10);
        dialog.getDialogPane().setContent(vbox);
        setbutton();
        dialog.initModality(Modality.APPLICATION_MODAL);
    }
/*
    public <T,
        SearchableComboBox> SearchableComboBox add_list_searchable(ObservableList<T> obs) {

        vbox.getChildren().add((Node) searchableComboBox);
        Label label_change = new Label();

        label_change.setFont(new Font("Arial", 20));
        vbox.getChildren().add(label_change);
        searchableComboBox.getSelectionModel().selectedIndexProperty().
                addListener((observable, oldValue, newValue) -> {
                    if(searchableComboBox.getValue()!=null) {
                        label_change.setText("Quantità rimanente: " + searchableComboBox.getValue().getAvailable());

                    }
                });

        return searchableComboBox;
    }

 */

    public Spinner<Integer> add_spinner() {
        spinner = new Spinner<>();
        spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 1000));
        spinner.setEditable(true);
        vbox.getChildren().add(spinner);
        return spinner;

    }

    public void add_label(String label) {
        vbox.getChildren().add(new Label(label));


    }

    private void setbutton() {

        okButtonType = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(okButtonType, ButtonType.CANCEL);
    }
    public  ButtonType getButton(){
        return this.okButtonType;
    }
    public Dialog<Rentvalue> getDialog(){

        return  dialog;
    }

    public  void get_event(SearchableComboBox<Inventory> s, Spinner<Integer>spinner){


        dialog.setResultConverter(dialog-> {
            if (dialog ==okButtonType) {
                if (s.getValue() == null || s.getValue().toString().trim().isEmpty()) {
                    showErrorAlert("Dati incompleti!");
                    return null; /* Prevent the dialog closing*/
                } else if (spinner.getValue() > s.getValue().getAvailable()) {
                    showErrorAlert("Quantità non disponibile");

                    return null;
                }
                else {
                    return  new Rentvalue(spinner.getValue(),
                            s.getValue().getProduct_id(), s.getValue().getAvailable());
                }}
            return null;
        });



    }

    private void showErrorAlert(String message) {
        // Create an error alert
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
        // Ensure the alert doesn't block or affect the main dialog
        alert.initModality(Modality.NONE); // This ensures the alert doesn't close the dialog

    }
    when(jsonClient.post(eq("http://example.com"),eq(jsonObject))).thenAnswer(invocation -> {

            JSONObject inputJson = invocation.getArgument(1);
            System.out.println(inputJson.toString());
            // Get the input JSONObject
            if (inputJson.has("username") && inputJson.has("password")) {
                // If both "username" and "password" are present, simulate a 200 OK response
                when(mock_response.statusCode()).thenReturn(200);
            } else {
                // If any key is missing, simulate a 400 Bad Request response
                when(mock_response.statusCode()).thenReturn(400);
            }
            return mock_response; // Return the mock response
        });
        int status=userService.authenticate("pinco","pallino");

        assertEquals(200, status);

        Mockito.verify(jsonClient).post(Mockito.anyString(), any(JSONObject.class));
    <!--      <argLine>
                        --add-opens=javafx.graphics/com.sun.javafx.application=org.testfx

                            --add-opens java.base/java.lang=ALL-UNNAMED
                            --add-opens java.base/java.util=ALL-UNNAMED

                    </argLine> -->


                    ublic class CustomDialog<T> extends Dialog<T> {
                        private final VBox vbox;
                        private ButtonType okButtonType;
                        public enum Validation{Email,Password,Vat}
                        public CustomDialog(String content) {
                            super();
                            setTitle(content);
                            vbox = new VBox();
                           vbox.setSpacing(20);
                         this.getDialogPane().setPrefHeight(400);
                         this.getDialogPane().setPrefWidth(400);

                            this.getDialogPane().setContent(vbox);

                            okButtonType = new ButtonType("OK",ButtonBar.ButtonData.OK_DONE); // inizializzo il bottone ok
                           this.getDialogPane().getButtonTypes().addAll(okButtonType,ButtonType.CANCEL); // Lo aggiungo al Dialog
                            initModality(Modality.APPLICATION_MODAL);
                        }
                        public Spinner<Integer> add_spinner() {
                            Spinner<Integer> spinner = new Spinner<>();
                            spinner.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 1000));
                            spinner.setEditable(true);
                            vbox.getChildren().add(spinner);
                            return spinner;

                        }

                        public TextField add_text_field(String placeholder) {

                            TextField field = new TextField();
                            field.setPromptText(placeholder);
                            vbox.getChildren().add(field);
                            field.setPadding(new Insets(10, 10, 10, 10));
                            field.setFont(new Font("Arial", 20));
                            return field;
                        }
                        public TextField add_text_field_with_validation(String value,Validation validation) {

                            TextField field = new TextField();
                            field.setPromptText(value);
                            switch (validation){
                                case Email:{
                                    field.setId("Email"+"-"+ UUID.randomUUID());
                                    break;
                                }
                                case Password:{
                                    field.setId("Password"+"-"+UUID.randomUUID());
                                    break;
                                }
                                case Vat:{
                                    field.setId("Vat"+"-"+UUID.randomUUID());
                                    break;
                                }

                            }

                            vbox.getChildren().add(field);
                            field.setPadding(new Insets(10, 10, 10, 10));
                            field.setFont(new Font("Arial", 20));
                           return  field;
                        }








