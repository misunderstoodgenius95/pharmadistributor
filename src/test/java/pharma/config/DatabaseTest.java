package pharma.config;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import pharma.Storage.FileStorage;
import pharma.config.database.Database;

import java.io.FileReader;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;

class DatabaseTest {
    private static Database db;
@BeforeAll
static void setupDatabase() {
    Properties properties= null;
    try {
        properties = FileStorage.getProperties_real(new ArrayList<>(Arrays.asList("host","username","password")),new FileReader("database.properties"));
    } catch (IOException e) {
       e.printStackTrace();
    }
    db=Database.getInstance(properties);

}

@Test
    void create_table(){

    String add_pharma=" CREATE table pharma " +
            " ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY , " +
            "anagrafica_cliente   VARCHAR(255) UNIQUE NOT NULL , " +
        "  sigla  VARCHAR(255) UNIQUE NOT NULL , " +
        "  partita_iva  VARCHAR(255) NOT NULL UNIQUE   " +
        " ); ";
db.execute(add_pharma);
    }


    @Test
    public void testTableCreation() throws Exception {
        // Check if the table exists

        String query = " SELECT table_name " +
                 " FROM information_schema.tables" +
               " WHERE table_schema = 'public'"+
       " AND table_type = 'BASE TABLE'";

              //  "and table_name = 'pharma' ";
         ResultSet rs=db.executeQuery(query);
while(rs.next()){
    System.out.println(rs.getString(1));
}
            //assertTrue(rs.next());
        }
        @Test
    public void find() throws SQLException {

    String query="SELECT * FROM pharma";
    ResultSet rs=db.executeQuery(query);

while(rs.next()) {
    System.out.println(rs.getString(1));
    System.out.println(rs.getString(2));
    System.out.println(rs.getString(3));


}
        }
        @Test
    public void delete() throws SQLException {
    String query="DROP TABLE pharma";
db.execute(query);

Assertions.assertFalse(db.check_exist_table("pharma"));
        }
        @Test
    public void show_table_structure() throws SQLException {

            try (ResultSet columns = db.get_MetaData().getColumns(null, null, "lotto", null)) {
                System.out.println("Structure of table:");
                System.out.println("----------------------------------------");
                System.out.printf("%-20s %-20s %-10s %n", "COLUMN_NAME", "DATA_TYPE", "IS_NULLABLE");
                System.out.println("----------------------------------------");

                while (columns.next()) {
                    String columnName = columns.getString("COLUMN_NAME");
                    String dataType = columns.getString("TYPE_NAME");
                    String isNullable = columns.getString("IS_NULLABLE");

                    System.out.printf("%-20s %-20s %-10s %n", columnName, dataType, isNullable);
                }
        }catch(Exception e){
            e.printStackTrace();}
        }

        @Test
    public void test_findBy(){
            assertNotNull(db.get_connection());


        }




}